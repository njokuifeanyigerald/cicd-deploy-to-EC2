def gv
pipeline{

    agent any

    parameters{

        choice(name: 'action', choices: 'create\ndelete', description: 'Choose create/Destroy')
        string(name: 'aws_account_id', description: " AWS Account ID", defaultValue: '516631643574')
        string(name: 'Region', description: "Region of ECR", defaultValue: 'af-south-1')
        string(name: 'ECR_REPO_NAME', description: "name of the ECR", defaultValue: 'gerald')
        string(name: 'cluster', description: "name of the EKS Cluster", defaultValue: 'demo-cluster1')
    }
    environment{

        ACCESS_KEY = credentials('AWS_ACCESS_KEY_ID')
        SECRET_KEY = credentials('AWS_SECRET_KEY_ID')
    }

    stages{
        stage("init"){
            when{expression { params.action == 'create'} }
            steps{
                script{
                    gv  = load "script.groovy"
                }   
            }
        }
        stage("Git checkout"){
            when{expression { params.action == 'create'} }
            steps{
                echo "========executing Git checkout========"
                git 'https://github.com/njokuifeanyigerald/EKSTerraformJenkinsCI-CD.git'
            }
            post{
                success{
                    echo "========A executed successfully========"
                }
                failure{
                    echo "========A execution failed========"
                }
            }
        }
        // stage("mvn testing"){
        //     when{expression { params.action == 'create'} }
        //     steps{
        //         echo "====++++executing mvn testing++++===="
        //         sh 'mvn test'
        //     }
        //     post{
        //         success{
        //             echo "====++++mvn testing executed successfully++++===="
        //         }
        //         failure{
        //             echo "====++++mvn testing execution failed++++===="
        //         }
        
        //     }
        // }
        // stage("Integration testing"){
        //     when{expression { params.action == 'create'} }
        //     steps{
        //         echo "====++++executing Integration testing++++===="
        //         sh 'mvn verify -DskipUnitTests'
        //     }
        //     post{
        //         success{
        //             echo "====++++Integration testing executed successfully++++===="
        //         }
        //         failure{
        //             echo "====++++Integration testing execution failed++++===="
        //         }
        
        //     }
        // }
        
        // // stage("Static Code Analysis"){
        // //     when{expression { params.action == 'create'} }
        // //     steps{
        // //         echo "====++++executing Static Code Analysis++++===="
        // //         script{
        // //             withSonarQubeEnv(credentialsId: 'sonarQube') {
        // //                 // some block
        // //                 sh 'mvn clean package sonar:sonar'
                       
        // //             }
        // //         }  
        // //     }
        // //     post{
        // //         success{
        // //             echo "====++++Static Code Analysis executed successfully++++===="
        // //         }
        // //         failure{
        // //             echo "====++++Static Code Analysis execution failed++++===="
        // //         }
        
        // //     }
        // // }
        // // stage("Quality Gate"){
        // //     when{expression { params.action == 'create'} }
        // //     steps{
        // //         echo "====++++executing Quality Gate++++===="
        // //         script{
        // //             waitForQualityGate abortPipeline: false, credentialsId: 'sonarQube'
        // //         }
        // //     }
        // //     post{
                
        // //         success{
        // //             echo "====++++Quality Gate executed successfully++++===="
        // //         }
        // //         failure{
        // //             echo "====++++Quality Gate execution failed++++===="
        // //         }
        
        // //     }
        // // }
        // stage("Maven Build"){
        //     when{expression { params.action == 'create'} }
        //     steps{
        //         echo "====++++executing Maven Build++++===="
        //         sh 'mvn clean install '
        //     }
        //     post{
        //         success{
        //             echo "====++++Maven Build executed successfully++++===="
        //         }
        //         failure{
        //             echo "====++++Maven Build execution failed++++===="
        //         }
        
        //     }
        // }
        stage("ECR docker build"){
            when{expression { params.action == 'create'} }
            steps{
                echo "====++++executing ECR docker build++++===="
                script{
                    gv.ecrDockerBuild("${params.aws_account_id}", "${params.Region}", "${params.ECR_REPO_NAME}")
                }
            }
            post{
                success{
                    echo "====++++ECR docker build executed successfully++++===="
                }
                failure{
                    echo "====++++ ECR docker build execution failed++++===="
                }
            }
        }

        stage("ECR docker scan"){
            when{expression { params.action == 'create'} }
            steps{
                echo "====++++executing ECR docker build++++===="
                script{
                    gv.ecrDockerScan("${params.aws_account_id}", "${params.Region}", "${params.ECR_REPO_NAME}")
                }
            }
            post{
                success{
                    echo "====++++ECR docker scanexecuted successfully++++===="
                }
                failure{
                    echo "====++++ ECR docker scan execution failed++++===="
                }
            }
        }
        stage("ECR docker push"){
            when{expression { params.action == 'create'} }
            steps{
                echo "====++++executing ECR docker build++++===="
                script{
                    gv.ecrDockerPush("${params.aws_account_id}", "${params.Region}", "${params.ECR_REPO_NAME}")
                }
            }
            post{
                success{
                    echo "====++++ECR docker build executed successfully++++===="
                }
                failure{
                    echo "====++++ ECR docker build execution failed++++===="
                }
            }
        }
        stage("ECR docker remove image"){
            when{expression { params.action == 'create'} }
            steps{
                echo "====++++executing ECR docker build++++===="
                script{
                    gv.ecrDockerImageRemove("${params.aws_account_id}", "${params.Region}", "${params.ECR_REPO_NAME}")
                }
            }
            post{
                success{
                    echo "====++++ECR docker remove image  executed successfully++++===="
                }
                failure{
                    echo "====++++ ECR docker remove image execution failed++++===="
                }
            }
        }
    }
    post{
        success{
            echo "========pipeline executed successfully ========"
        }
        failure{
            echo "========pipeline execution failed========"
        }
    }
}